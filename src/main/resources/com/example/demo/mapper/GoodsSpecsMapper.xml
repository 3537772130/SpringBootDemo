<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.GoodsSpecsMapper">
    <resultMap id="BaseResultMap" type="com.example.demo.entity.GoodsSpecs">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="goods_id" jdbcType="INTEGER" property="goodsId"/>
        <result column="specs" jdbcType="VARCHAR" property="specs"/>
        <result column="sell_price" jdbcType="DECIMAL" property="sellPrice"/>
        <result column="discount" jdbcType="DECIMAL" property="discount"/>
        <result column="discount_describe" jdbcType="VARCHAR" property="discountDescribe"/>
        <result column="specs_status" jdbcType="BIT" property="specsStatus"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, goods_id, specs, sell_price, discount, discount_describe, specs_status
  </sql>
    <select id="selectByExample" parameterType="com.example.demo.entity.GoodsSpecsExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from goods_specs
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <include refid="PageSuffix"/>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from goods_specs
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from goods_specs
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.example.demo.entity.GoodsSpecsExample">
        delete from goods_specs
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.example.demo.entity.GoodsSpecs">
    insert into goods_specs (id, goods_id, specs,
      sell_price, discount, discount_describe,
      specs_status)
    values (#{id,jdbcType=INTEGER}, #{goodsId,jdbcType=INTEGER}, #{specs,jdbcType=VARCHAR},
      #{sellPrice,jdbcType=DECIMAL}, #{discount,jdbcType=DECIMAL}, #{discountDescribe,jdbcType=VARCHAR},
      #{specsStatus,jdbcType=BIT})
  </insert>
    <insert id="insertSelective" keyProperty="id" parameterType="com.example.demo.entity.GoodsSpecs"
            useGeneratedKeys="true">
        insert into goods_specs
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="goodsId != null">
                goods_id,
            </if>
            <if test="specs != null">
                specs,
            </if>
            <if test="sellPrice != null">
                sell_price,
            </if>
            <if test="discount != null">
                discount,
            </if>
            <if test="discountDescribe != null">
                discount_describe,
            </if>
            <if test="specsStatus != null">
                specs_status,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="goodsId != null">
                #{goodsId,jdbcType=INTEGER},
            </if>
            <if test="specs != null">
                #{specs,jdbcType=VARCHAR},
            </if>
            <if test="sellPrice != null">
                #{sellPrice,jdbcType=DECIMAL},
            </if>
            <if test="discount != null">
                #{discount,jdbcType=DECIMAL},
            </if>
            <if test="discountDescribe != null">
                #{discountDescribe,jdbcType=VARCHAR},
            </if>
            <if test="specsStatus != null">
                #{specsStatus,jdbcType=BIT},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.example.demo.entity.GoodsSpecsExample" resultType="java.lang.Long">
        select count(*) from goods_specs
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update goods_specs
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.goodsId != null">
                goods_id = #{record.goodsId,jdbcType=INTEGER},
            </if>
            <if test="record.specs != null">
                specs = #{record.specs,jdbcType=VARCHAR},
            </if>
            <if test="record.sellPrice != null">
                sell_price = #{record.sellPrice,jdbcType=DECIMAL},
            </if>
            <if test="record.discount != null">
                discount = #{record.discount,jdbcType=DECIMAL},
            </if>
            <if test="record.discountDescribe != null">
                discount_describe = #{record.discountDescribe,jdbcType=VARCHAR},
            </if>
            <if test="record.specsStatus != null">
                specs_status = #{record.specsStatus,jdbcType=BIT},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update goods_specs
        set id = #{record.id,jdbcType=INTEGER},
        goods_id = #{record.goodsId,jdbcType=INTEGER},
        specs = #{record.specs,jdbcType=VARCHAR},
        sell_price = #{record.sellPrice,jdbcType=DECIMAL},
        discount = #{record.discount,jdbcType=DECIMAL},
        discount_describe = #{record.discountDescribe,jdbcType=VARCHAR},
        specs_status = #{record.specsStatus,jdbcType=BIT}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.entity.GoodsSpecs">
        update goods_specs
        <set>
            <if test="goodsId != null">
                goods_id = #{goodsId,jdbcType=INTEGER},
            </if>
            <if test="specs != null">
                specs = #{specs,jdbcType=VARCHAR},
            </if>
            <if test="sellPrice != null">
                sell_price = #{sellPrice,jdbcType=DECIMAL},
            </if>
            <if test="discount != null">
                discount = #{discount,jdbcType=DECIMAL},
            </if>
            <if test="discountDescribe != null">
                discount_describe = #{discountDescribe,jdbcType=VARCHAR},
            </if>
            <if test="specsStatus != null">
                specs_status = #{specsStatus,jdbcType=BIT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.example.demo.entity.GoodsSpecs">
    update goods_specs
    set goods_id = #{goodsId,jdbcType=INTEGER},
      specs = #{specs,jdbcType=VARCHAR},
      sell_price = #{sellPrice,jdbcType=DECIMAL},
      discount = #{discount,jdbcType=DECIMAL},
      discount_describe = #{discountDescribe,jdbcType=VARCHAR},
      specs_status = #{specsStatus,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <sql id="PageSuffix">
        <if test="page != null">
            limit #{page.rowStart},#{page.pageSize}
        </if>
    </sql>
</mapper>
